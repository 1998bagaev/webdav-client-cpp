{
  "name": "webdavclient",
  "tagline": "WebDAV Client provides easy and convenient to work with WebDAV-servers.",
  "body": "WebDAV Client\r\n===\r\n[![version](https://img.shields.io/badge/version-0.9.7-brightgreen.svg)](https://github.com/designerror/webdav-client-cpp/releases/tag/v0.9.7)\r\n[![slack](https://img.shields.io/badge/slack-online-E32475.svg)](http://webdav.slack.com)\r\n[![Build Status](https://travis-ci.org/designerror/webdav-client-cpp.svg?branch=v0.9.7)](https://travis-ci.org/designerror/webdav-client-cpp)\r\n\r\nPackage ```WebDAV Client``` provides easy and convenient to work with WebDAV-servers:\r\n\r\n - Yandex.Disk\r\n - Dropbox\r\n - Google Drive\r\n - Box\r\n - 4shared\r\n - ...\r\n\r\nRequirements\r\n===\r\n\r\n - [curl](https://github.com/curl/curl) `>= 7.38.0`\r\n - [openssl](https://github.com/openssl/openssl) `>= 1.0.1f`\r\n - [pugixml](https://github.com/zeux/pugixml) `>= 1.0.0`\r\n\r\nInstall\r\n===\r\n\r\nFor `Windows` see `INSTALL.WIN.md` file.\r\n\r\n**Build requirements**\r\n\r\nFor `*-nix` or `macOS` you can build the requirements with package manager or from sources.\r\n\r\nIf you want build the requirements from sources then see `INSTALL.UNIX.md` and `INSTALL.macOS.md` respectively.\r\n\r\nIf you want use package manager then input:\r\n\r\n```bash\r\n# *-nix\r\n$ apt-get install libssl-dev libcurl4-openssl-dev libpugixml-dev\r\n\r\n# macOS\r\n$ brew install curl pugixml\r\n```\r\n\r\n**Build Webdav Client**\r\n\r\n```bash\r\n$ git clone https://github.com/designerror/webdav-client-cpp\r\n$ cd webdav-client-cpp\r\n$ mkdir build && cd build\r\n$ cmake .. && make\r\n$ make install\r\n```\r\n\r\nDocumentation\r\n===\r\n\r\n```bash\r\n> cd docs\r\n> doxygen doxygen.conf\r\n> firefox html/index.html\r\n```\r\n\r\nUsage examples\r\n===\r\n\r\n```c++\r\n#include <iostream>\r\n#include <memory>\r\n#include <webdav/client.hpp>\r\n\r\nint main()\r\n{\r\n  std::map<std::string, std::string> options =\r\n  {\r\n    {\"webdav_hostname\", \"https://webdav.yandex.ru\"},\r\n    {\"webdav_login\",    \"webdav_login\"},\r\n    {\"webdav_password\", \"webdav_password\"}\r\n  };\r\n            \r\n  std::shared_ptr<WebDAV::Client> client(WebDAV::Client::Init(options));\r\n  \r\n  auto check_connection = client->check();\r\n  std::cout << \"test connection with WebDAV drive is \" \r\n            << (check_connection ? \"\" : \"not \")\r\n            << \"successful\"<< std::endl;\r\n  \r\n  auto is_directory = client->is_dir(\"/path/to/remote/resource\");\r\n  std::cout << \"remote resource is \" \r\n            << (is_directory ? \"\" : \"not \") \r\n            << \"directory\" << std::endl;\r\n  \r\n  client->create_directory(\"/path/to/remote/directory/\");\r\n  client->clean(\"/path/to/remote/directory/\");\r\n  \r\n  std::cout << \"On WebDAV-disk available free space: \" \r\n            << client->free_size() \r\n            << std::endl;\r\n  \r\n  std::cout << \"remote_directory_name\";\r\n  for(auto& resource_name : client->list(\"/path/to/remote/directory/\"))\r\n  {\r\n    std::cout << \"\\t\" << \"-\" << resource_name;\r\n  }\r\n  std::cout << std::endl;\r\n  \r\n  client->download(\"/path/to/remote/file\", \"/path/to/local/file\");\r\n  client->clean(\"/path/to/remote/file\");\r\n  client->upload(\"/path/to/remote/file\", \"/path/to/local/file\");\r\n  \r\n  auto meta_info = client->info(\"/path/to/remote/resource\");\r\n  for(auto& field : meta_info)\r\n  {\r\n    std::cout << field.first << \":\" << \"\\t\" << field.second;\r\n  }\r\n  std::cout << std::endl;\r\n\r\n  client->copy(\"/path/to/remote/file1\", \"/path/to/remote/file2\");\r\n  client->move(\"/path/to/remote/file1\", \"/path/to/remote/file3\");\r\n  \r\n  client->async_upload(\"/path/to/remote/file\", \"/path/to/local/file\");\r\n  client->async_download(\"/path/to/remote/file\", \"/path/to/local/file\");\r\n}\r\n```\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}