{
  "name": "webdavclient",
  "tagline": "",
  "body": "WebDAV Client\r\n===\r\n\r\nPackage ```WebDAV Client``` provides easy and convenient to work with WebDAV-servers:\r\n\r\n - Yandex.Disk\r\n - Dropbox\r\n - Google Drive\r\n - Box\r\n - 4shared\r\n - ...\r\n\r\nInstall\r\n===\r\n\r\n```bash\r\n> git clone https://github.com/designerror/webdav-client-cpp.git\r\n> cd webdav-client-cpp\r\n> clion .\r\n```\r\n\r\nDocumentation\r\n===\r\n\r\n```bash\r\n> cd docs\r\n> doxygen doxygen.conf\r\n> firefox html/index.html\r\n```\r\n\r\nUsage examples\r\n===\r\n\r\n```c++\r\n#include <iostream>\r\n#include <memory>\r\n#include <webdav/client.hpp>\r\n\r\nint main()\r\n{\r\n  std::map<std::string, std::string> options =\r\n  {\r\n    {\"webdav_hostname\", \"https://webdav.yandex.ru\"},\r\n    {\"webdav_login\", \"webdav_login\"},\r\n    {\"webdav_password\", \"webdav_password\"}\r\n  };\r\n            \r\n  std::shared_ptr<WebDAV::Client> client(WebDAV::Client::Init(options));\r\n  \r\n  auto check_connection = client->check();\r\n  std::cout << \"test connection with WebDAV drive is \" \r\n            << (check_connection ? \"\" : \"not \")\r\n            << \"successful\"<< std::endl;\r\n  \r\n  auto is_directory = client->is_dir(\"/path/to/remote/resource\");\r\n  std::cout << \"remote resource is \" \r\n            << (is_directory ? \"\" : \"not \") \r\n            << \"directory\" << std::endl;\r\n  \r\n  client->create_directory(\"/path/to/remote/directory/\");\r\n  client->clean(\"/path/to/remote/directory/\");\r\n  \r\n  std::cout << \"On WebDAV-disk available free space: \" \r\n            << client->free_size() \r\n            << std::endl;\r\n  \r\n  std::cout << \"remote_directory_name\";\r\n  for(auto resource_name : client->list(\"/path/to/remote/directory/\"))\r\n  {\r\n    std::cout << \"\\t\" << \"-\" << resource_name;\r\n  }\r\n  std::cout << std::endl;\r\n  \r\n  client->download(\"/path/to/remote/file\", \"/path/to/local/file\");\r\n  client->clean(\"/path/to/remote/file\");\r\n  client->upload(\"/path/to/remote/file\", \"/path/to/local/file\");\r\n  \r\n  auto meta_info = client->info(\"/path/to/remote/resource\");\r\n  for(auto field : meta_info)\r\n  {\r\n    std::cout << field.first << \":\" << \"\\t\" << field.second;\r\n  }\r\n  std::cout << std::endl;\r\n\r\n  client->copy(\"/path/to/remote/file1\", \"/path/to/remote/file2\");\r\n  client->move(\"/path/to/remote/file1\", \"/path/to/remote/file3\");\r\n  \r\n  client->async_upload(\"/path/to/remote/file\", \"/path/to/local/file\");\r\n  client->async_download(\"/path/to/remote/file\", \"/path/to/local/file\");\r\n}\r\n```\r\n\r\nAcknowledgments\r\n===\r\nThanks to the `JetBrains` company for\r\n\r\n<a href=\"https://www.jetbrains.com/clion/\"><img src=\"https://confluence.jetbrains.com/download/attachments/54342479/CLION?version=3&modificationDate=1449748289000&api=v2\" width=\"100\"></a>\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}